CCS PCH C Compiler, Version 5.010, 22546               18-may.-20 23:45

               Filename:   D:\iWork\Git-works\oven\code\main.lst

               ROM used:   4852 bytes (15%)
                           Largest free fragment is 27912
               RAM used:   52 (3%) at main() level
                           94 (5%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   1220
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include <18F2550.h> 
.................... //////// Standard Header file for the PIC18F2550 device //////////////// 
.................... #device PIC18F2550 
0096:  MOVFF  FF2,0D
009A:  BCF    FF2.7
009C:  CLRF   FF7
009E:  ADDLW  B0
00A0:  MOVWF  FF6
00A2:  MOVLW  00
00A4:  ADDWFC FF7,F
00A6:  TBLRD*+
00A8:  MOVF   FF5,W
00AA:  BTFSC  0D.7
00AC:  BSF    FF2.7
00AE:  RETURN 0
00B0:  DATA 28,0C
00B2:  DATA 01,06
*
00E0:  DATA 20,20
00E2:  DATA 4F,56
00E4:  DATA 45,4E
00E6:  DATA 20,43
00E8:  DATA 4F,4E
00EA:  DATA 54,52
00EC:  DATA 4F,4C
00EE:  DATA 20,20
00F0:  DATA 00,00
00F2:  DATA 20,20
00F4:  DATA 20,2A
00F6:  DATA 2A,56
00F8:  DATA 2D,31
00FA:  DATA 2E,30
00FC:  DATA 2A,2A
00FE:  DATA 20,20
0100:  DATA 20,20
0102:  DATA 00,00
0104:  DATA 20,46
0106:  DATA 49,58
0108:  DATA 20,54
010A:  DATA 45,4D
010C:  DATA 50,45
010E:  DATA 52,41
0110:  DATA 54,55
0112:  DATA 52,45
0114:  DATA 20,00
0116:  DATA 50,52
0118:  DATA 45,2D
011A:  DATA 48,45
011C:  DATA 41,54
011E:  DATA 49,4E
0120:  DATA 47,3A
0122:  DATA 20,25
0124:  DATA 6C,75
0126:  DATA 00,00
0128:  DATA 46,49
012A:  DATA 58,20
012C:  DATA 54,49
012E:  DATA 4D,45
0130:  DATA 20,28
0132:  DATA 4D,49
0134:  DATA 4E,29
0136:  DATA 20,00
0138:  DATA 48,45
013A:  DATA 41,54
013C:  DATA 49,4E
013E:  DATA 47,3A
0140:  DATA 20,25
0142:  DATA 6C,75
0144:  DATA 00,00
0146:  DATA 20,46
0148:  DATA 49,58
014A:  DATA 20,54
014C:  DATA 45,4D
014E:  DATA 50,45
0150:  DATA 52,41
0152:  DATA 54,55
0154:  DATA 52,45
0156:  DATA 20,00
0158:  DATA 48,45
015A:  DATA 41,54
015C:  DATA 49,4E
015E:  DATA 47,3A
0160:  DATA 20,25
0162:  DATA 6C,75
0164:  DATA 00,00
0166:  DATA 20,20
0168:  DATA 50,52
016A:  DATA 45,2D
016C:  DATA 3E,48
016E:  DATA 45,41
0170:  DATA 54,49
0172:  DATA 4E,47
0174:  DATA 20,20
0176:  DATA 00,00
0178:  DATA 20,25
017A:  DATA 6C,75
017C:  DATA 25,63
017E:  DATA 43,20
0180:  DATA 2D,3E
0182:  DATA 20,25
0184:  DATA 6C,75
0186:  DATA 25,63
0188:  DATA 43,20
018A:  DATA 00,00
018C:  DATA 20,20
018E:  DATA 50,52
0190:  DATA 45,53
0192:  DATA 53,20
0194:  DATA 20,45
0196:  DATA 4E,54
0198:  DATA 45,52
019A:  DATA 20,20
019C:  DATA 00,00
019E:  DATA 20,20
01A0:  DATA 54,4F
01A2:  DATA 20,20
01A4:  DATA 43,4F
01A6:  DATA 4E,54
01A8:  DATA 49,4E
01AA:  DATA 55,45
01AC:  DATA 20,20
01AE:  DATA 00,00
01B0:  DATA 20,20
01B2:  DATA 20,20
01B4:  DATA 48,45
01B6:  DATA 41,54
01B8:  DATA 49,4E
01BA:  DATA 47,20
01BC:  DATA 20,20
01BE:  DATA 20,20
01C0:  DATA 00,00
01C2:  DATA 25,6C
01C4:  DATA 75,25
01C6:  DATA 63,43
01C8:  DATA 20,2D
01CA:  DATA 3E,20
01CC:  DATA 25,6C
01CE:  DATA 75,25
01D0:  DATA 63,43
01D2:  DATA 20,00
01D4:  DATA 20,20
01D6:  DATA 20,20
01D8:  DATA 46,49
01DA:  DATA 4E,49
01DC:  DATA 53,48
01DE:  DATA 20,20
01E0:  DATA 20,20
01E2:  DATA 20,00
01E4:  DATA 20,20
01E6:  DATA 20,20
01E8:  DATA 20,25
01EA:  DATA 6C,75
01EC:  DATA 25,63
01EE:  DATA 43,20
01F0:  DATA 20,20
01F2:  DATA 20,20
01F4:  DATA 00,00
*
0502:  TBLRD*+
0504:  MOVF   FF5,F
0506:  BZ    0520
0508:  MOVFF  FF6,36
050C:  MOVFF  FF7,37
0510:  MOVFF  FF5,3F
0514:  RCALL  04B2
0516:  MOVFF  36,FF6
051A:  MOVFF  37,FF7
051E:  BRA    0502
0520:  RETURN 0
*
0572:  TBLRD*+
0574:  MOVFF  FF6,37
0578:  MOVFF  FF7,38
057C:  MOVFF  FF5,3F
0580:  RCALL  04B2
0582:  MOVFF  37,FF6
0586:  MOVFF  38,FF7
058A:  DECFSZ 36,F
058C:  BRA    0572
058E:  RETURN 0
0590:  MOVFF  FEA,3E
0594:  MOVFF  FE9,3D
0598:  SWAPF  37,W
059A:  IORLW  F0
059C:  MOVWF  39
059E:  ADDWF  39,F
05A0:  ADDLW  E2
05A2:  MOVWF  3A
05A4:  ADDLW  32
05A6:  MOVWF  3C
05A8:  MOVF   37,W
05AA:  ANDLW  0F
05AC:  ADDWF  3A,F
05AE:  ADDWF  3A,F
05B0:  ADDWF  3C,F
05B2:  ADDLW  E9
05B4:  MOVWF  3B
05B6:  ADDWF  3B,F
05B8:  ADDWF  3B,F
05BA:  SWAPF  36,W
05BC:  ANDLW  0F
05BE:  ADDWF  3B,F
05C0:  ADDWF  3C,F
05C2:  RLCF   3B,F
05C4:  RLCF   3C,F
05C6:  COMF   3C,F
05C8:  RLCF   3C,F
05CA:  MOVF   36,W
05CC:  ANDLW  0F
05CE:  ADDWF  3C,F
05D0:  RLCF   39,F
05D2:  MOVLW  07
05D4:  MOVWF  38
05D6:  MOVLW  0A
05D8:  DECF   3B,F
05DA:  ADDWF  3C,F
05DC:  BNC   05D8
05DE:  DECF   3A,F
05E0:  ADDWF  3B,F
05E2:  BNC   05DE
05E4:  DECF   39,F
05E6:  ADDWF  3A,F
05E8:  BNC   05E4
05EA:  DECF   38,F
05EC:  ADDWF  39,F
05EE:  BNC   05EA
05F0:  CLRF   FEA
05F2:  MOVLW  38
05F4:  MOVWF  FE9
05F6:  MOVLW  07
05F8:  ANDWF  3D,W
05FA:  BCF    3D.6
05FC:  ADDWF  FE9,F
05FE:  MOVLW  3C
0600:  SUBWF  FE9,W
0602:  BTFSC  FD8.2
0604:  BSF    3D.6
0606:  MOVF   FEF,W
0608:  MOVWF  00
060A:  BNZ   061C
060C:  BTFSC  3D.6
060E:  BRA    061C
0610:  BTFSC  3D.4
0612:  BRA    063A
0614:  BTFSC  3D.3
0616:  BRA    061C
0618:  MOVLW  20
061A:  BRA    0622
061C:  BSF    3D.3
061E:  BCF    3D.4
0620:  MOVLW  30
0622:  ADDWF  00,F
0624:  MOVFF  FEA,37
0628:  MOVFF  FE9,36
062C:  MOVFF  00,3F
0630:  RCALL  04B2
0632:  MOVFF  37,FEA
0636:  MOVFF  36,FE9
063A:  MOVF   FEE,W
063C:  BTFSS  3D.6
063E:  BRA    05FE
0640:  RETURN 0
0642:  BTFSC  FD8.1
0644:  BRA    064C
0646:  CLRF   FEA
0648:  MOVLW  59
064A:  MOVWF  FE9
064C:  CLRF   00
064E:  CLRF   01
0650:  CLRF   02
0652:  CLRF   03
0654:  CLRF   59
0656:  CLRF   5A
0658:  CLRF   5B
065A:  CLRF   5C
065C:  MOVF   58,W
065E:  IORWF  57,W
0660:  IORWF  56,W
0662:  IORWF  55,W
0664:  BZ    06BE
0666:  MOVLW  20
0668:  MOVWF  5D
066A:  BCF    FD8.0
066C:  RLCF   51,F
066E:  RLCF   52,F
0670:  RLCF   53,F
0672:  RLCF   54,F
0674:  RLCF   59,F
0676:  RLCF   5A,F
0678:  RLCF   5B,F
067A:  RLCF   5C,F
067C:  MOVF   58,W
067E:  SUBWF  5C,W
0680:  BNZ   0692
0682:  MOVF   57,W
0684:  SUBWF  5B,W
0686:  BNZ   0692
0688:  MOVF   56,W
068A:  SUBWF  5A,W
068C:  BNZ   0692
068E:  MOVF   55,W
0690:  SUBWF  59,W
0692:  BNC   06B2
0694:  MOVF   55,W
0696:  SUBWF  59,F
0698:  MOVF   56,W
069A:  BTFSS  FD8.0
069C:  INCFSZ 56,W
069E:  SUBWF  5A,F
06A0:  MOVF   57,W
06A2:  BTFSS  FD8.0
06A4:  INCFSZ 57,W
06A6:  SUBWF  5B,F
06A8:  MOVF   58,W
06AA:  BTFSS  FD8.0
06AC:  INCFSZ 58,W
06AE:  SUBWF  5C,F
06B0:  BSF    FD8.0
06B2:  RLCF   00,F
06B4:  RLCF   01,F
06B6:  RLCF   02,F
06B8:  RLCF   03,F
06BA:  DECFSZ 5D,F
06BC:  BRA    066A
06BE:  MOVFF  59,FEF
06C2:  MOVFF  5A,FEC
06C6:  MOVFF  5B,FEC
06CA:  MOVFF  5C,FEC
06CE:  RETURN 0
06D0:  CLRF   01
06D2:  CLRF   02
06D4:  CLRF   00
06D6:  CLRF   03
06D8:  MOVF   4C,W
06DA:  BNZ   06E0
06DC:  MOVF   4B,W
06DE:  BZ    0710
06E0:  MOVLW  10
06E2:  MOVWF  4D
06E4:  BCF    FD8.0
06E6:  RLCF   49,F
06E8:  RLCF   4A,F
06EA:  RLCF   00,F
06EC:  RLCF   03,F
06EE:  MOVF   4C,W
06F0:  SUBWF  03,W
06F2:  BNZ   06F8
06F4:  MOVF   4B,W
06F6:  SUBWF  00,W
06F8:  BNC   0708
06FA:  MOVF   4B,W
06FC:  SUBWF  00,F
06FE:  BTFSS  FD8.0
0700:  DECF   03,F
0702:  MOVF   4C,W
0704:  SUBWF  03,F
0706:  BSF    FD8.0
0708:  RLCF   01,F
070A:  RLCF   02,F
070C:  DECFSZ 4D,F
070E:  BRA    06E4
0710:  RETURN 0
0712:  CLRF   55
0714:  CLRF   56
0716:  MOVLW  01
0718:  MOVWF  57
071A:  CLRF   FDA
071C:  CLRF   FD9
071E:  CLRF   5A
0720:  MOVLW  4D
0722:  MOVWF  59
0724:  CLRF   FEA
0726:  MOVLW  51
0728:  MOVWF  FE9
072A:  MOVFF  5A,FE2
072E:  MOVFF  59,FE1
0732:  MOVFF  57,58
0736:  BCF    FD8.0
0738:  MOVF   FE5,W
073A:  MULWF  FEE
073C:  MOVF   FF3,W
073E:  ADDWFC 55,F
0740:  MOVF   FF4,W
0742:  ADDWFC 56,F
0744:  DECFSZ 58,F
0746:  BRA    0736
0748:  MOVFF  55,FDE
074C:  MOVFF  56,55
0750:  CLRF   56
0752:  BTFSC  FD8.0
0754:  INCF   56,F
0756:  INCF   59,F
0758:  BTFSC  FD8.2
075A:  INCF   5A,F
075C:  INCF   57,F
075E:  MOVF   57,W
0760:  SUBLW  05
0762:  BNZ   0724
0764:  GOTO   08DE (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
....................  
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #fuses CPUDIV1        //No System Clock Postscaler 
.................... #fuses NOUSBDIV       //USB clock source comes from primary oscillator 
.................... #fuses INTRC_IO       //Internal RC Osc, no CLKOUT 
.................... #fuses NOFCMEN        //Fail-safe clock monitor disabled 
.................... #fuses NOIESO         //Internal External Switch Over mode disabled 
.................... #fuses PUT            //Power Up Timer 
.................... #fuses NOBROWNOUT     //No brownout reset 
.................... #fuses NOVREGEN       //USB voltage regulator disabled 
.................... #fuses NOWDT          //No Watch Dog Timer 
.................... #fuses NOPBADEN       //PORTB pins are configured as digital I/O on RESET 
.................... #fuses NOMCLR         //Master Clear pin used for I/O 
.................... #fuses NOLVP          //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #fuses NODEBUG        //No Debug mode for ICD 
.................... #fuses PROTECT        //Code protected from reads 
.................... #fuses NOCPD          //No EE protection 
.................... #fuses NOWRT          //Program memory not write protected 
.................... #fuses NOWRTD         //Data EEPROM not write protected 
....................  
.................... #use delay(internal=8000000) 
*
01F6:  CLRF   FEA
01F8:  MOVLW  4E
01FA:  MOVWF  FE9
01FC:  MOVF   FEF,W
01FE:  BZ    021A
0200:  MOVLW  02
0202:  MOVWF  01
0204:  CLRF   00
0206:  DECFSZ 00,F
0208:  BRA    0206
020A:  DECFSZ 01,F
020C:  BRA    0204
020E:  MOVLW  97
0210:  MOVWF  00
0212:  DECFSZ 00,F
0214:  BRA    0212
0216:  DECFSZ FEF,F
0218:  BRA    0200
021A:  RETURN 0
*
0768:  MOVLW  09
076A:  SUBWF  4E,F
076C:  BNC   0784
076E:  CLRF   FEA
0770:  MOVLW  4E
0772:  MOVWF  FE9
0774:  BCF    FD8.0
0776:  RRCF   FEF,F
0778:  MOVF   FEF,W
077A:  BZ    0784
077C:  BRA    0780
077E:  NOP   
0780:  DECFSZ FEF,F
0782:  BRA    077E
0784:  GOTO   07BC (RETURN)
.................... #use FIXED_IO( A_outputs=PIN_A2,PIN_A1 ) 
.................... #use RS232(UART1,baud=9600,parity=N,bits=8) 
....................  
.................... #include <main.h> 
....................  
....................  
.................... #USE SPI (MASTER, CLK=PIN_C4, DI=PIN_C2, DO=PIN_C1, ENABLE=PIN_C5, BAUD=38400, MODE=1, BITS=16, ENABLE_ACTIVE=0, STREAM=SPI_1, MSB_FIRST) 
*
03F6:  MOVF   38,W
03F8:  SUBLW  10
03FA:  BZ    0406
03FC:  MOVWF  39
03FE:  RLCF   36,F
0400:  RLCF   37,F
0402:  DECFSZ 39,F
0404:  BRA    03FE
0406:  BSF    F94.2
0408:  BCF    F94.1
040A:  BCF    F94.4
040C:  BCF    F8B.4
040E:  BCF    F94.5
0410:  BCF    F8B.5
0412:  MOVFF  38,39
0416:  BSF    F8B.4
0418:  MOVLW  07
041A:  MOVWF  3A
041C:  DECFSZ 3A,F
041E:  BRA    041C
0420:  BTFSS  37.7
0422:  BCF    F8B.1
0424:  BTFSC  37.7
0426:  BSF    F8B.1
0428:  RLCF   36,F
042A:  RLCF   37,F
042C:  BCF    F8B.4
042E:  MOVLW  06
0430:  MOVWF  3A
0432:  DECFSZ 3A,F
0434:  BRA    0432
0436:  RLCF   01,F
0438:  RLCF   02,F
043A:  BTFSS  F82.2
043C:  BCF    01.0
043E:  BTFSC  F82.2
0440:  BSF    01.0
0442:  DECFSZ 39,F
0444:  BRA    0416
0446:  BSF    F8B.5
0448:  GOTO   0456 (RETURN)
....................  
....................  
....................  
.................... #define KEYBOARD_PIN PIN_A0 
....................  
.................... #define LCD_ENABLE_PIN PIN_B2 
.................... #define LCD_RS_PIN PIN_B0 
.................... #define LCD_RW_PIN PIN_B1 
.................... #define LCD_DATA4 PIN_B3 
.................... #define LCD_DATA5 PIN_B4 
.................... #define LCD_DATA6 PIN_B5 
.................... #define LCD_DATA7 PIN_B6 
....................  
.................... int v =0; 
.................... unsigned int8 q =0; 
.................... int8 counter=0; 
.................... int8 seconds=0; 
.................... int16 minutes=0; 
.................... int16 tmp=0; 
.................... int8 flag=0; 
.................... int8 flag1=0; 
.................... int16 b=0; 
.................... int8 open_=0; 
.................... int16 preheating=0; 
.................... int16 pre_temperature=0; 
.................... int16 heating=0; 
.................... int16 temperature=0; 
....................  
.................... char ptr [8] = {  0b00001111, 
....................                   0b00001001, 
....................                   0b00001111, 
....................                   0b00000000, 
....................                   0b00000000, 
....................                   0b00000000, 
....................                   0b00000000, 
....................                   0b00000000}; 
.................... #INT_TIMER1 
.................... void  TIMER1_isr(void)  
.................... { 
....................    set_timer1(3035); 
*
00B4:  MOVLW  0B
00B6:  MOVWF  FCF
00B8:  MOVLW  DB
00BA:  MOVWF  FCE
....................     
....................    if(counter < 3)counter++; 
00BC:  MOVF   18,W
00BE:  SUBLW  02
00C0:  BNC   00C6
00C2:  INCF   18,F
00C4:  BRA    00DA
....................    else  
....................    { 
....................       counter=0; 
00C6:  CLRF   18
....................       if(seconds<59)seconds++; 
00C8:  MOVF   19,W
00CA:  SUBLW  3A
00CC:  BNC   00D2
00CE:  INCF   19,F
00D0:  BRA    00DA
....................       else  
....................       { 
....................          seconds=0; 
00D2:  CLRF   19
....................          minutes++; 
00D4:  INCF   1A,F
00D6:  BTFSC  FD8.2
00D8:  INCF   1B,F
....................       } 
....................    } 
....................     
.................... } 
....................  
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
00DA:  BCF    F9E.0
00DC:  GOTO   0054
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
02AE:  BSF    F93.3
....................    output_float(LCD_DATA5); 
02B0:  BSF    F93.4
....................    output_float(LCD_DATA6); 
02B2:  BSF    F93.5
....................    output_float(LCD_DATA7); 
02B4:  BSF    F93.6
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
02B6:  BSF    F8A.1
02B8:  BCF    F93.1
....................    delay_cycles(1); 
02BA:  NOP   
....................    lcd_output_enable(1); 
02BC:  BSF    F8A.2
02BE:  BCF    F93.2
....................    delay_cycles(1); 
02C0:  NOP   
....................    high = lcd_read_nibble(); 
02C2:  RCALL  025C
02C4:  MOVFF  01,47
....................        
....................    lcd_output_enable(0); 
02C8:  BCF    F8A.2
02CA:  BCF    F93.2
....................    delay_cycles(1); 
02CC:  NOP   
....................    lcd_output_enable(1); 
02CE:  BSF    F8A.2
02D0:  BCF    F93.2
....................    delay_us(1); 
02D2:  BRA    02D4
....................    low = lcd_read_nibble(); 
02D4:  RCALL  025C
02D6:  MOVFF  01,46
....................        
....................    lcd_output_enable(0); 
02DA:  BCF    F8A.2
02DC:  BCF    F93.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
02DE:  BCF    F93.3
....................    output_drive(LCD_DATA5); 
02E0:  BCF    F93.4
....................    output_drive(LCD_DATA6); 
02E2:  BCF    F93.5
....................    output_drive(LCD_DATA7); 
02E4:  BCF    F93.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
02E6:  SWAPF  47,W
02E8:  MOVWF  00
02EA:  MOVLW  F0
02EC:  ANDWF  00,F
02EE:  MOVF   00,W
02F0:  IORWF  46,W
02F2:  MOVWF  01
02F4:  GOTO   0304 (RETURN)
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
025C:  CLRF   48
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
025E:  BSF    F93.3
0260:  MOVLW  00
0262:  BTFSC  F81.3
0264:  MOVLW  01
0266:  IORWF  48,F
....................    n |= input(LCD_DATA5) << 1; 
0268:  BSF    F93.4
026A:  MOVLW  00
026C:  BTFSC  F81.4
026E:  MOVLW  01
0270:  MOVWF  00
0272:  BCF    FD8.0
0274:  RLCF   00,F
0276:  MOVF   00,W
0278:  IORWF  48,F
....................    n |= input(LCD_DATA6) << 2; 
027A:  BSF    F93.5
027C:  MOVLW  00
027E:  BTFSC  F81.5
0280:  MOVLW  01
0282:  MOVWF  00
0284:  RLCF   00,F
0286:  RLCF   00,F
0288:  MOVLW  FC
028A:  ANDWF  00,F
028C:  MOVF   00,W
028E:  IORWF  48,F
....................    n |= input(LCD_DATA7) << 3; 
0290:  BSF    F93.6
0292:  MOVLW  00
0294:  BTFSC  F81.6
0296:  MOVLW  01
0298:  MOVWF  00
029A:  RLCF   00,F
029C:  RLCF   00,F
029E:  RLCF   00,F
02A0:  MOVLW  F8
02A2:  ANDWF  00,F
02A4:  MOVF   00,W
02A6:  IORWF  48,F
....................     
....................    return(n); 
02A8:  MOVFF  48,01
....................   #else 
02AC:  RETURN 0
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
021C:  BTFSC  47.0
021E:  BRA    0224
0220:  BCF    F8A.3
0222:  BRA    0226
0224:  BSF    F8A.3
0226:  BCF    F93.3
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0228:  BTFSC  47.1
022A:  BRA    0230
022C:  BCF    F8A.4
022E:  BRA    0232
0230:  BSF    F8A.4
0232:  BCF    F93.4
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0234:  BTFSC  47.2
0236:  BRA    023C
0238:  BCF    F8A.5
023A:  BRA    023E
023C:  BSF    F8A.5
023E:  BCF    F93.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0240:  BTFSC  47.3
0242:  BRA    0248
0244:  BCF    F8A.6
0246:  BRA    024A
0248:  BSF    F8A.6
024A:  BCF    F93.6
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
024C:  NOP   
....................    lcd_output_enable(1); 
024E:  BSF    F8A.2
0250:  BCF    F93.2
....................    delay_us(2); 
0252:  BRA    0254
0254:  BRA    0256
....................    lcd_output_enable(0); 
0256:  BCF    F8A.2
0258:  BCF    F93.2
025A:  RETURN 0
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
02F8:  BCF    F93.2
....................    lcd_rs_tris(); 
02FA:  BCF    F93.0
....................    lcd_rw_tris(); 
02FC:  BCF    F93.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
02FE:  BCF    F8A.0
0300:  BCF    F93.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
0302:  BRA    02AE
0304:  MOVFF  01,46
0308:  BTFSC  01.7
030A:  BRA    0302
....................    lcd_output_rs(address); 
030C:  MOVF   44,F
030E:  BNZ   0314
0310:  BCF    F8A.0
0312:  BRA    0316
0314:  BSF    F8A.0
0316:  BCF    F93.0
....................    delay_cycles(1); 
0318:  NOP   
....................    lcd_output_rw(0); 
031A:  BCF    F8A.1
031C:  BCF    F93.1
....................    delay_cycles(1); 
031E:  NOP   
....................    lcd_output_enable(0); 
0320:  BCF    F8A.2
0322:  BCF    F93.2
....................    lcd_send_nibble(n >> 4); 
0324:  SWAPF  45,W
0326:  MOVWF  46
0328:  MOVLW  0F
032A:  ANDWF  46,F
032C:  MOVFF  46,47
0330:  RCALL  021C
....................    lcd_send_nibble(n & 0xf); 
0332:  MOVF   45,W
0334:  ANDLW  0F
0336:  MOVWF  46
0338:  MOVWF  47
033A:  RCALL  021C
033C:  RETURN 0
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
033E:  BCF    F93.3
....................    output_drive(LCD_DATA5); 
0340:  BCF    F93.4
....................    output_drive(LCD_DATA6); 
0342:  BCF    F93.5
....................    output_drive(LCD_DATA7); 
0344:  BCF    F93.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0346:  BCF    F93.2
....................    lcd_rs_tris(); 
0348:  BCF    F93.0
....................    lcd_rw_tris(); 
034A:  BCF    F93.1
....................  #endif 
....................  
....................    lcd_output_rs(0); 
034C:  BCF    F8A.0
034E:  BCF    F93.0
....................    lcd_output_rw(0); 
0350:  BCF    F8A.1
0352:  BCF    F93.1
....................    lcd_output_enable(0); 
0354:  BCF    F8A.2
0356:  BCF    F93.2
....................      
....................    delay_ms(15); 
0358:  MOVLW  0F
035A:  MOVWF  4E
035C:  RCALL  01F6
....................    for(i=1;i<=3;++i) 
035E:  MOVLW  01
0360:  MOVWF  33
0362:  MOVF   33,W
0364:  SUBLW  03
0366:  BNC   0378
....................    { 
....................        lcd_send_nibble(3); 
0368:  MOVLW  03
036A:  MOVWF  47
036C:  RCALL  021C
....................        delay_ms(5); 
036E:  MOVLW  05
0370:  MOVWF  4E
0372:  RCALL  01F6
0374:  INCF   33,F
0376:  BRA    0362
....................    } 
....................     
....................    lcd_send_nibble(2); 
0378:  MOVLW  02
037A:  MOVWF  47
037C:  RCALL  021C
....................    delay_ms(5); 
037E:  MOVLW  05
0380:  MOVWF  4E
0382:  RCALL  01F6
....................    for(i=0;i<=3;++i) 
0384:  CLRF   33
0386:  MOVF   33,W
0388:  SUBLW  03
038A:  BNC   03A8
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
038C:  CLRF   03
038E:  MOVF   33,W
0390:  MOVFF  FF2,34
0394:  BCF    FF2.7
0396:  RCALL  0096
0398:  BTFSC  34.7
039A:  BSF    FF2.7
039C:  MOVWF  34
039E:  CLRF   44
03A0:  MOVWF  45
03A2:  RCALL  02F8
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
03A4:  INCF   33,F
03A6:  BRA    0386
03A8:  GOTO   12BC (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0490:  DECFSZ 41,W
0492:  BRA    0496
0494:  BRA    049C
....................       address=LCD_LINE_TWO; 
0496:  MOVLW  40
0498:  MOVWF  42
049A:  BRA    049E
....................    else 
....................       address=0; 
049C:  CLRF   42
....................       
....................    address+=x-1; 
049E:  MOVLW  01
04A0:  SUBWF  40,W
04A2:  ADDWF  42,F
....................    lcd_send_byte(0,0x80|address); 
04A4:  MOVF   42,W
04A6:  IORLW  80
04A8:  MOVWF  43
04AA:  CLRF   44
04AC:  MOVWF  45
04AE:  RCALL  02F8
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
04B0:  RETURN 0
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
04B2:  MOVF   3F,W
04B4:  XORLW  07
04B6:  BZ    04C6
04B8:  XORLW  0B
04BA:  BZ    04D0
04BC:  XORLW  06
04BE:  BZ    04E0
04C0:  XORLW  02
04C2:  BZ    04EC
04C4:  BRA    04F6
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
04C6:  MOVLW  01
04C8:  MOVWF  40
04CA:  MOVWF  41
04CC:  RCALL  0490
04CE:  BRA    0500
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
04D0:  CLRF   44
04D2:  MOVLW  01
04D4:  MOVWF  45
04D6:  RCALL  02F8
....................                      delay_ms(2); 
04D8:  MOVLW  02
04DA:  MOVWF  4E
04DC:  RCALL  01F6
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
04DE:  BRA    0500
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
04E0:  MOVLW  01
04E2:  MOVWF  40
04E4:  MOVLW  02
04E6:  MOVWF  41
04E8:  RCALL  0490
04EA:  BRA    0500
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
04EC:  CLRF   44
04EE:  MOVLW  10
04F0:  MOVWF  45
04F2:  RCALL  02F8
04F4:  BRA    0500
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
04F6:  MOVLW  01
04F8:  MOVWF  44
04FA:  MOVFF  3F,45
04FE:  RCALL  02F8
....................      #endif 
....................    } 
0500:  RETURN 0
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
*
03AC:  RLCF   33,F
03AE:  RLCF   33,F
03B0:  RLCF   33,F
03B2:  MOVLW  F8
03B4:  ANDWF  33,F
....................    which &= 0x38; 
03B6:  MOVLW  38
03B8:  ANDWF  33,F
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
03BA:  MOVF   33,W
03BC:  IORLW  40
03BE:  MOVWF  37
03C0:  CLRF   44
03C2:  MOVWF  45
03C4:  RCALL  02F8
....................  
....................    for(i=0; i<8; i++) 
03C6:  CLRF   36
03C8:  MOVF   36,W
03CA:  SUBLW  07
03CC:  BNC   03F2
....................    { 
....................       lcd_send_byte(1, *ptr++); 
03CE:  MOVFF  35,03
03D2:  MOVF   34,W
03D4:  INCF   34,F
03D6:  BTFSC  FD8.2
03D8:  INCF   35,F
03DA:  MOVWF  FE9
03DC:  MOVFF  03,FEA
03E0:  MOVFF  FEF,37
03E4:  MOVLW  01
03E6:  MOVWF  44
03E8:  MOVFF  37,45
03EC:  RCALL  02F8
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
03EE:  INCF   36,F
03F0:  BRA    03C8
03F2:  GOTO   12D6 (RETURN)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include "tones.c" 
.................... ////////////////// Driver to generate musical tones ///////////////////// 
.................... ////                                                                 //// 
.................... ////  generate_tone(frequency, duration)     Generates wave at set   //// 
.................... ////                                         frequency (Hz) for set  //// 
.................... ////                                         duration (ms)           //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #ifndef  MUSIC_NOTES 
.................... #define  MUSIC_NOTES 
....................  
.................... //            NOTE                 FREQUENCY 
.................... //                     Octave0  Octave1  Octave2  Octave3 
.................... const long C_NOTE[4]  ={ 262,     523,    1047,    2093}; 
.................... const long Db_NOTE[4] ={ 277,     554,    1109,    2217}; 
.................... const long D_NOTE[4]  ={ 294,     587,    1175,    2349}; 
.................... const long Eb_NOTE[4] ={ 311,     622,    1245,    2489}; 
.................... const long E_NOTE[4]  ={ 330,     659,    1329,    2637}; 
.................... const long F_NOTE[4]  ={ 349,     698,    1397,    2794}; 
.................... const long Gb_NOTE[4] ={ 370,     740,    1480,    2960}; 
.................... const long G_NOTE[4]  ={ 392,     784,    1568,    3136}; 
.................... const long Ab_NOTE[4] ={ 415,     831,    1661,    3322}; 
.................... const long A_NOTE[4]  ={ 440,     880,    1760,    3520}; 
.................... const long Bb_NOTE[4] ={ 466,     923,    1865,    3729}; 
.................... const long B_NOTE[4]  ={ 494,     988,    1976,    3951}; 
.................... #endif 
....................  
.................... #define TONE_PIN  PIN_A2 
....................  
....................  
.................... void do_delay(int ms_delay, int num_ms, int us_delay, int num_us)  { 
....................  int i; 
....................  
....................  for(i=0;i<num_ms;i++) 
*
0788:  CLRF   4D
078A:  MOVF   4A,W
078C:  SUBWF  4D,W
078E:  BC    079A
....................  delay_ms(250); 
0790:  MOVLW  FA
0792:  MOVWF  4E
0794:  RCALL  01F6
0796:  INCF   4D,F
0798:  BRA    078A
....................  delay_ms(ms_delay); 
079A:  MOVFF  49,4E
079E:  RCALL  01F6
....................  for(i=0;i<num_us;i++) 
07A0:  CLRF   4D
07A2:  MOVF   4C,W
07A4:  SUBWF  4D,W
07A6:  BC    07B6
....................   delay_us(250); 
07A8:  MOVLW  A6
07AA:  MOVWF  00
07AC:  DECFSZ 00,F
07AE:  BRA    07AC
07B0:  NOP   
07B2:  INCF   4D,F
07B4:  BRA    07A2
....................  delay_us(us_delay); 
07B6:  MOVFF  4B,4E
07BA:  BRA    0768
07BC:  RETURN 0
.................... } 
....................  
....................  
.................... void generate_tone(long frequency, long duration) 
.................... { 
....................    int32 total_delay_time;                      // in microseconds 
....................    long total_ms_delay_time, total_us_delay_time; 
....................    int num_us_delays, num_ms_delays, ms_delay_time, us_delay_time; 
....................    long num_periods; 
....................  
....................    total_delay_time = (1000000/frequency)/2-10; // calculate total delay time (10 for error) 
07BE:  BCF    FD8.1
07C0:  CLRF   54
07C2:  MOVLW  0F
07C4:  MOVWF  53
07C6:  MOVLW  42
07C8:  MOVWF  52
07CA:  MOVLW  40
07CC:  MOVWF  51
07CE:  CLRF   58
07D0:  CLRF   57
07D2:  MOVFF  38,56
07D6:  MOVFF  37,55
07DA:  RCALL  0642
07DC:  MOVFF  03,4C
07E0:  MOVFF  02,4B
07E4:  MOVFF  01,4A
07E8:  MOVFF  00,49
07EC:  BCF    FD8.0
07EE:  RRCF   4C,F
07F0:  RRCF   4B,F
07F2:  RRCF   4A,F
07F4:  RRCF   49,F
07F6:  MOVLW  0A
07F8:  SUBWF  49,W
07FA:  MOVWF  3B
07FC:  MOVLW  00
07FE:  SUBWFB 4A,W
0800:  MOVWF  3C
0802:  MOVLW  00
0804:  SUBWFB 4B,W
0806:  MOVWF  3D
0808:  MOVLW  00
080A:  SUBWFB 4C,W
080C:  MOVWF  3E
....................  
....................    total_ms_delay_time = total_delay_time/1000; // total delay time of ms 
080E:  BCF    FD8.1
0810:  MOVFF  3E,54
0814:  MOVFF  3D,53
0818:  MOVFF  3C,52
081C:  MOVFF  3B,51
0820:  CLRF   58
0822:  CLRF   57
0824:  MOVLW  03
0826:  MOVWF  56
0828:  MOVLW  E8
082A:  MOVWF  55
082C:  RCALL  0642
082E:  MOVFF  01,40
0832:  MOVFF  00,3F
....................    num_ms_delays = total_ms_delay_time/250;     // number of 250ms delays needed 
0836:  MOVFF  40,4A
083A:  MOVFF  3F,49
083E:  CLRF   4C
0840:  MOVLW  FA
0842:  MOVWF  4B
0844:  RCALL  06D0
0846:  MOVFF  01,44
....................    ms_delay_time = total_ms_delay_time%250;     // left over ms delay time needed 
084A:  MOVFF  40,4A
084E:  MOVFF  3F,49
0852:  CLRF   4C
0854:  MOVLW  FA
0856:  MOVWF  4B
0858:  RCALL  06D0
085A:  MOVFF  00,45
....................  
....................    total_us_delay_time = total_delay_time%1000; // total delay time of us (ms already acounted for) 
085E:  BSF    FD8.1
0860:  CLRF   FEA
0862:  MOVLW  49
0864:  MOVWF  FE9
0866:  MOVFF  3E,54
086A:  MOVFF  3D,53
086E:  MOVFF  3C,52
0872:  MOVFF  3B,51
0876:  CLRF   58
0878:  CLRF   57
087A:  MOVLW  03
087C:  MOVWF  56
087E:  MOVLW  E8
0880:  MOVWF  55
0882:  RCALL  0642
0884:  MOVFF  4A,42
0888:  MOVFF  49,41
....................    num_us_delays = total_us_delay_time/250;     // number of 250us delays needed 
088C:  MOVFF  42,4A
0890:  MOVFF  41,49
0894:  CLRF   4C
0896:  MOVLW  FA
0898:  MOVWF  4B
089A:  RCALL  06D0
089C:  MOVFF  01,43
....................    us_delay_time = total_us_delay_time%250;     // left over us delay time needed 
08A0:  MOVFF  42,4A
08A4:  MOVFF  41,49
08A8:  CLRF   4C
08AA:  MOVLW  FA
08AC:  MOVWF  4B
08AE:  RCALL  06D0
08B0:  MOVFF  00,46
....................  
....................    num_periods = ((int32)duration*1000)/(1000000/frequency); 
08B4:  CLRF   4C
08B6:  CLRF   4B
08B8:  MOVFF  3A,4A
08BC:  MOVFF  39,49
08C0:  MOVFF  4C,50
08C4:  MOVFF  4B,4F
08C8:  MOVFF  3A,4E
08CC:  MOVFF  39,4D
08D0:  CLRF   54
08D2:  CLRF   53
08D4:  MOVLW  03
08D6:  MOVWF  52
08D8:  MOVLW  E8
08DA:  MOVWF  51
08DC:  BRA    0712
08DE:  MOVFF  03,4C
08E2:  MOVFF  02,4B
08E6:  MOVFF  01,4A
08EA:  MOVFF  00,49
08EE:  BCF    FD8.1
08F0:  CLRF   54
08F2:  MOVLW  0F
08F4:  MOVWF  53
08F6:  MOVLW  42
08F8:  MOVWF  52
08FA:  MOVLW  40
08FC:  MOVWF  51
08FE:  CLRF   58
0900:  CLRF   57
0902:  MOVFF  38,56
0906:  MOVFF  37,55
090A:  RCALL  0642
090C:  MOVFF  03,50
0910:  MOVFF  02,4F
0914:  MOVFF  01,4E
0918:  MOVFF  00,4D
091C:  BCF    FD8.1
091E:  MOVFF  4C,54
0922:  MOVFF  4B,53
0926:  MOVFF  4A,52
092A:  MOVFF  49,51
092E:  MOVFF  03,58
0932:  MOVFF  02,57
0936:  MOVFF  01,56
093A:  MOVFF  00,55
093E:  RCALL  0642
0940:  MOVFF  01,48
0944:  MOVFF  00,47
....................  
....................    while((num_periods--) != 0) 
0948:  MOVFF  48,03
094C:  MOVF   47,W
094E:  BTFSC  FD8.2
0950:  DECF   48,F
0952:  DECF   47,F
0954:  MOVWF  49
0956:  MOVFF  03,4A
095A:  MOVF   49,F
095C:  BNZ   0962
095E:  MOVF   4A,F
0960:  BZ    0994
....................    { 
....................       do_delay(ms_delay_time, num_ms_delays, us_delay_time, num_us_delays); 
0962:  MOVFF  45,49
0966:  MOVFF  44,4A
096A:  MOVFF  46,4B
096E:  MOVFF  43,4C
0972:  RCALL  0788
....................       output_high(TONE_PIN); 
0974:  MOVLW  F9
0976:  MOVWF  F92
0978:  BSF    F89.2
....................       do_delay(ms_delay_time, num_ms_delays, us_delay_time, num_us_delays); 
097A:  MOVFF  45,49
097E:  MOVFF  44,4A
0982:  MOVFF  46,4B
0986:  MOVFF  43,4C
098A:  RCALL  0788
....................       output_low(TONE_PIN); 
098C:  MOVLW  F9
098E:  MOVWF  F92
0990:  BCF    F89.2
0992:  BRA    0948
....................    } 
....................  
....................    return; 
0994:  RETURN 0
.................... } 
....................  
.................... #include "funciones.c" 
.................... void tono (int8 who){ 
....................      
....................    if( who == 0 ){ 
0996:  MOVF   36,F
0998:  BNZ   09B0
....................       
....................       generate_tone(500,125); 
099A:  MOVLW  01
099C:  MOVWF  38
099E:  MOVLW  F4
09A0:  MOVWF  37
09A2:  CLRF   3A
09A4:  MOVLW  7D
09A6:  MOVWF  39
09A8:  RCALL  07BE
....................       delay_ms(20); 
09AA:  MOVLW  14
09AC:  MOVWF  4E
09AE:  RCALL  01F6
....................    } 
....................    if( who == 1 ){ 
09B0:  DECFSZ 36,W
09B2:  BRA    09D4
....................  
....................       generate_tone(E_NOTE[0],100); 
09B4:  MOVLW  01
09B6:  MOVWF  38
09B8:  MOVLW  4A
09BA:  MOVWF  37
09BC:  CLRF   3A
09BE:  MOVLW  64
09C0:  MOVWF  39
09C2:  RCALL  07BE
....................       generate_tone(B_NOTE[0],80); 
09C4:  MOVLW  01
09C6:  MOVWF  38
09C8:  MOVLW  EE
09CA:  MOVWF  37
09CC:  CLRF   3A
09CE:  MOVLW  50
09D0:  MOVWF  39
09D2:  RCALL  07BE
....................    } 
....................    if( who == 2 ){ 
09D4:  MOVF   36,W
09D6:  SUBLW  02
09D8:  BNZ   0A00
....................  
....................       generate_tone(600,125); 
09DA:  MOVLW  02
09DC:  MOVWF  38
09DE:  MOVLW  58
09E0:  MOVWF  37
09E2:  CLRF   3A
09E4:  MOVLW  7D
09E6:  MOVWF  39
09E8:  RCALL  07BE
....................       delay_ms(100); 
09EA:  MOVLW  64
09EC:  MOVWF  4E
09EE:  RCALL  01F6
....................       generate_tone(600,125); 
09F0:  MOVLW  02
09F2:  MOVWF  38
09F4:  MOVLW  58
09F6:  MOVWF  37
09F8:  CLRF   3A
09FA:  MOVLW  7D
09FC:  MOVWF  39
09FE:  RCALL  07BE
....................    } 
....................    if( who == 3 ){ 
0A00:  MOVF   36,W
0A02:  SUBLW  03
0A04:  BNZ   0A76
....................  
....................       generate_tone(600,225); 
0A06:  MOVLW  02
0A08:  MOVWF  38
0A0A:  MOVLW  58
0A0C:  MOVWF  37
0A0E:  CLRF   3A
0A10:  MOVLW  E1
0A12:  MOVWF  39
0A14:  RCALL  07BE
....................       delay_ms(400); 
0A16:  MOVLW  02
0A18:  MOVWF  37
0A1A:  MOVLW  C8
0A1C:  MOVWF  4E
0A1E:  CALL   01F6
0A22:  DECFSZ 37,F
0A24:  BRA    0A1A
....................       generate_tone(600,225); 
0A26:  MOVLW  02
0A28:  MOVWF  38
0A2A:  MOVLW  58
0A2C:  MOVWF  37
0A2E:  CLRF   3A
0A30:  MOVLW  E1
0A32:  MOVWF  39
0A34:  RCALL  07BE
....................       delay_ms(400); 
0A36:  MOVLW  02
0A38:  MOVWF  37
0A3A:  MOVLW  C8
0A3C:  MOVWF  4E
0A3E:  CALL   01F6
0A42:  DECFSZ 37,F
0A44:  BRA    0A3A
....................       generate_tone(600,225); 
0A46:  MOVLW  02
0A48:  MOVWF  38
0A4A:  MOVLW  58
0A4C:  MOVWF  37
0A4E:  CLRF   3A
0A50:  MOVLW  E1
0A52:  MOVWF  39
0A54:  RCALL  07BE
....................       delay_ms(400); 
0A56:  MOVLW  02
0A58:  MOVWF  37
0A5A:  MOVLW  C8
0A5C:  MOVWF  4E
0A5E:  CALL   01F6
0A62:  DECFSZ 37,F
0A64:  BRA    0A5A
....................       generate_tone(600,225); 
0A66:  MOVLW  02
0A68:  MOVWF  38
0A6A:  MOVLW  58
0A6C:  MOVWF  37
0A6E:  CLRF   3A
0A70:  MOVLW  E1
0A72:  MOVWF  39
0A74:  RCALL  07BE
....................    } 
....................    if(who == 4 ){ 
0A76:  MOVF   36,W
0A78:  SUBLW  04
0A7A:  BNZ   0A8E
....................  
....................       generate_tone(600,1000); 
0A7C:  MOVLW  02
0A7E:  MOVWF  38
0A80:  MOVLW  58
0A82:  MOVWF  37
0A84:  MOVLW  03
0A86:  MOVWF  3A
0A88:  MOVLW  E8
0A8A:  MOVWF  39
0A8C:  RCALL  07BE
....................  
....................    } 
0A8E:  RETURN 0
....................  
....................  } 
....................  
.................... unsigned int aabs(signed int e ) 
.................... { 
....................    if(e > 0) return e; 
*
0D7E:  BTFSC  36.7
0D80:  BRA    0D90
0D82:  MOVF   36,W
0D84:  SUBLW  00
0D86:  BC    0D90
0D88:  MOVFF  36,01
0D8C:  BRA    0D9E
0D8E:  BRA    0D9E
....................    else return abs(e); 
0D90:  MOVF   36,W
0D92:  BTFSS  36.7
0D94:  BRA    0D9C
0D96:  MOVLW  00
0D98:  BSF    FD8.0
0D9A:  SUBFWB 36,W
0D9C:  MOVWF  01
0D9E:  GOTO   0DB6 (RETURN)
.................... } 
....................  
.................... int8 buttons() 
.................... { 
....................     
....................   tmp = read_adc(); 
*
0A90:  BSF    FC2.1
0A92:  BTFSC  FC2.1
0A94:  BRA    0A92
0A96:  MOVFF  FC3,1C
0A9A:  MOVFF  FC4,1D
....................    
....................        if( tmp >= 114 && tmp <= 226 && flag1==0 )  { flag = 1 ; flag1=1; tono(0);} 
0A9E:  MOVF   1D,F
0AA0:  BNZ   0AA8
0AA2:  MOVF   1C,W
0AA4:  SUBLW  71
0AA6:  BC    0AC2
0AA8:  MOVF   1D,F
0AAA:  BNZ   0AC2
0AAC:  MOVF   1C,W
0AAE:  SUBLW  E2
0AB0:  BNC   0AC2
0AB2:  MOVF   1F,F
0AB4:  BNZ   0AC2
0AB6:  MOVLW  01
0AB8:  MOVWF  1E
0ABA:  MOVWF  1F
0ABC:  CLRF   36
0ABE:  RCALL  0996
0AC0:  BRA    0B96
....................   else if( tmp >= 284 && tmp <= 396 && flag1==0 )  { flag = 2 ; flag1=1; tono(0);} 
0AC2:  MOVF   1D,W
0AC4:  SUBLW  00
0AC6:  BC    0AF2
0AC8:  XORLW  FF
0ACA:  BNZ   0AD2
0ACC:  MOVF   1C,W
0ACE:  SUBLW  1B
0AD0:  BC    0AF2
0AD2:  MOVF   1D,W
0AD4:  SUBLW  01
0AD6:  BNC   0AF2
0AD8:  BNZ   0AE0
0ADA:  MOVF   1C,W
0ADC:  SUBLW  8C
0ADE:  BNC   0AF2
0AE0:  MOVF   1F,F
0AE2:  BNZ   0AF2
0AE4:  MOVLW  02
0AE6:  MOVWF  1E
0AE8:  MOVLW  01
0AEA:  MOVWF  1F
0AEC:  CLRF   36
0AEE:  RCALL  0996
0AF0:  BRA    0B96
....................   else if( tmp >= 454 && tmp <= 566 && flag1==0 )  { flag = 3 ; flag1=1; tono(0);} 
0AF2:  MOVF   1D,W
0AF4:  SUBLW  00
0AF6:  BC    0B22
0AF8:  XORLW  FF
0AFA:  BNZ   0B02
0AFC:  MOVF   1C,W
0AFE:  SUBLW  C5
0B00:  BC    0B22
0B02:  MOVF   1D,W
0B04:  SUBLW  02
0B06:  BNC   0B22
0B08:  BNZ   0B10
0B0A:  MOVF   1C,W
0B0C:  SUBLW  36
0B0E:  BNC   0B22
0B10:  MOVF   1F,F
0B12:  BNZ   0B22
0B14:  MOVLW  03
0B16:  MOVWF  1E
0B18:  MOVLW  01
0B1A:  MOVWF  1F
0B1C:  CLRF   36
0B1E:  RCALL  0996
0B20:  BRA    0B96
....................   else if( tmp >= 624 && tmp <= 736 && flag1==0 )  { flag = 4 ; flag1=1; tono(0);} 
0B22:  MOVF   1D,W
0B24:  SUBLW  01
0B26:  BC    0B52
0B28:  XORLW  FF
0B2A:  BNZ   0B32
0B2C:  MOVF   1C,W
0B2E:  SUBLW  6F
0B30:  BC    0B52
0B32:  MOVF   1D,W
0B34:  SUBLW  02
0B36:  BNC   0B52
0B38:  BNZ   0B40
0B3A:  MOVF   1C,W
0B3C:  SUBLW  E0
0B3E:  BNC   0B52
0B40:  MOVF   1F,F
0B42:  BNZ   0B52
0B44:  MOVLW  04
0B46:  MOVWF  1E
0B48:  MOVLW  01
0B4A:  MOVWF  1F
0B4C:  CLRF   36
0B4E:  RCALL  0996
0B50:  BRA    0B96
....................   else if( tmp >= 794 && tmp <= 906 && flag1==0 )  { flag = 5 ; flag1=1; tono(1);} 
0B52:  MOVF   1D,W
0B54:  SUBLW  02
0B56:  BC    0B82
0B58:  XORLW  FF
0B5A:  BNZ   0B62
0B5C:  MOVF   1C,W
0B5E:  SUBLW  19
0B60:  BC    0B82
0B62:  MOVF   1D,W
0B64:  SUBLW  03
0B66:  BNC   0B82
0B68:  BNZ   0B70
0B6A:  MOVF   1C,W
0B6C:  SUBLW  8A
0B6E:  BNC   0B82
0B70:  MOVF   1F,F
0B72:  BNZ   0B82
0B74:  MOVLW  05
0B76:  MOVWF  1E
0B78:  MOVLW  01
0B7A:  MOVWF  1F
0B7C:  MOVWF  36
0B7E:  RCALL  0996
0B80:  BRA    0B96
....................    
....................   else {  
....................          flag = 0;  
0B82:  CLRF   1E
....................          if(tmp>1000)flag1 = 0; 
0B84:  MOVF   1D,W
0B86:  SUBLW  02
0B88:  BC    0B96
0B8A:  XORLW  FF
0B8C:  BNZ   0B94
0B8E:  MOVF   1C,W
0B90:  SUBLW  E8
0B92:  BC    0B96
0B94:  CLRF   1F
....................        } 
....................  
....................   return flag; 
0B96:  MOVFF  1E,01
0B9A:  RETURN 0
.................... } 
....................  
.................... void read_temp() 
.................... { 
....................    b        =  spi_xfer(0); 
*
044C:  CLRF   37
044E:  CLRF   36
0450:  MOVLW  10
0452:  MOVWF  38
0454:  BRA    03F6
0456:  MOVF   01,W
0458:  MOVFF  02,21
045C:  MOVFF  01,20
....................    open_   =  bit_test(b,2); 
0460:  CLRF   22
0462:  BTFSC  20.2
0464:  INCF   22,F
....................    b        &= 0b0111111111111000; 
0466:  MOVLW  F8
0468:  ANDWF  20,F
046A:  BCF    21.7
....................    b        =  b>>3; 
046C:  RRCF   21,F
046E:  RRCF   20,F
0470:  RRCF   21,F
0472:  RRCF   20,F
0474:  RRCF   21,F
0476:  RRCF   20,F
0478:  MOVLW  1F
047A:  ANDWF  21,F
....................    b        /= 4; 
047C:  RRCF   21,F
047E:  RRCF   20,F
0480:  RRCF   21,F
0482:  RRCF   20,F
0484:  MOVLW  3F
0486:  ANDWF  21,F
....................    delay_ms(1); 
0488:  MOVLW  01
048A:  MOVWF  4E
048C:  RCALL  01F6
048E:  RETURN 0
.................... } 
....................  
.................... void control(int16 t) 
.................... { 
....................    read_temp(); 
*
0DA2:  CALL   044C
....................    int8 x = b; 
0DA6:  MOVFF  20,35
....................    q= x-t; 
0DAA:  MOVF   33,W
0DAC:  SUBWF  35,W
0DAE:  MOVWF  17
....................    q=aabs(q); 
0DB0:  MOVFF  17,36
0DB4:  BRA    0D7E
0DB6:  MOVFF  01,17
....................    if(q >= 1 && x>t) output_low(PIN_A1); 
0DBA:  MOVF   17,W
0DBC:  SUBLW  00
0DBE:  BC    0DD2
0DC0:  MOVF   34,F
0DC2:  BNZ   0DD2
0DC4:  MOVF   35,W
0DC6:  SUBWF  33,W
0DC8:  BC    0DD2
0DCA:  MOVLW  F9
0DCC:  MOVWF  F92
0DCE:  BCF    F89.1
0DD0:  BRA    0DE8
....................    else if(q >= 5 && t>x) output_high (PIN_A1); 
0DD2:  MOVF   17,W
0DD4:  SUBLW  04
0DD6:  BC    0DE8
0DD8:  MOVF   34,F
0DDA:  BNZ   0DE2
0DDC:  MOVF   33,W
0DDE:  SUBWF  35,W
0DE0:  BC    0DE8
0DE2:  MOVLW  F9
0DE4:  MOVWF  F92
0DE6:  BSF    F89.1
0DE8:  RETURN 0
.................... } 
....................  
.................... void begin() 
.................... { 
....................  
.................... v =0; 
*
0522:  CLRF   16
.................... q =0; 
0524:  CLRF   17
.................... counter=0; 
0526:  CLRF   18
.................... seconds=0; 
0528:  CLRF   19
.................... minutes=0; 
052A:  CLRF   1B
052C:  CLRF   1A
.................... tmp=0; 
052E:  CLRF   1D
0530:  CLRF   1C
.................... flag=0; 
0532:  CLRF   1E
.................... flag1=0; 
0534:  CLRF   1F
.................... b=0; 
0536:  CLRF   21
0538:  CLRF   20
.................... open_=0; 
053A:  CLRF   22
....................    lcd_putc('\f'); 
053C:  MOVLW  0C
053E:  MOVWF  3F
0540:  RCALL  04B2
....................    printf(lcd_putc,"  OVEN CONTROL  "); 
0542:  MOVLW  E0
0544:  MOVWF  FF6
0546:  MOVLW  00
0548:  MOVWF  FF7
054A:  RCALL  0502
....................    lcd_gotoxy(1,2); 
054C:  MOVLW  01
054E:  MOVWF  40
0550:  MOVLW  02
0552:  MOVWF  41
0554:  RCALL  0490
....................    printf(lcd_putc,"   **V-1.0**    "); 
0556:  MOVLW  F2
0558:  MOVWF  FF6
055A:  MOVLW  00
055C:  MOVWF  FF7
055E:  RCALL  0502
....................    delay_ms(2000); 
0560:  MOVLW  08
0562:  MOVWF  33
0564:  MOVLW  FA
0566:  MOVWF  4E
0568:  RCALL  01F6
056A:  DECFSZ 33,F
056C:  BRA    0564
056E:  GOTO   12DE (RETURN)
.................... } 
....................  
.................... void mode () 
.................... { 
....................    while(1) 
....................    { 
....................       lcd_putc('\f'); 
*
0B9C:  MOVLW  0C
0B9E:  MOVWF  3F
0BA0:  RCALL  04B2
....................       printf(lcd_putc," FIX TEMPERATURE "); 
0BA2:  MOVLW  04
0BA4:  MOVWF  FF6
0BA6:  MOVLW  01
0BA8:  MOVWF  FF7
0BAA:  RCALL  0502
....................       lcd_gotoxy(1,2); 
0BAC:  MOVLW  01
0BAE:  MOVWF  40
0BB0:  MOVLW  02
0BB2:  MOVWF  41
0BB4:  RCALL  0490
....................       printf(lcd_putc,"PRE-HEATING: %lu",pre_temperature); 
0BB6:  MOVLW  16
0BB8:  MOVWF  FF6
0BBA:  MOVLW  01
0BBC:  MOVWF  FF7
0BBE:  MOVLW  0D
0BC0:  MOVWF  36
0BC2:  RCALL  0572
0BC4:  MOVLW  10
0BC6:  MOVWF  FE9
0BC8:  MOVFF  26,37
0BCC:  MOVFF  25,36
0BD0:  RCALL  0590
....................       int8 d= buttons(); 
0BD2:  RCALL  0A90
0BD4:  MOVFF  01,33
....................       if (d == 1)pre_temperature++; 
0BD8:  DECFSZ 33,W
0BDA:  BRA    0BE4
0BDC:  INCF   25,F
0BDE:  BTFSC  FD8.2
0BE0:  INCF   26,F
0BE2:  BRA    0C1C
....................       else if (d == 2)pre_temperature--; 
0BE4:  MOVF   33,W
0BE6:  SUBLW  02
0BE8:  BNZ   0BF4
0BEA:  MOVF   25,W
0BEC:  BTFSC  FD8.2
0BEE:  DECF   26,F
0BF0:  DECF   25,F
0BF2:  BRA    0C1C
....................       else if (d == 3)pre_temperature-=10; 
0BF4:  MOVF   33,W
0BF6:  SUBLW  03
0BF8:  BNZ   0C04
0BFA:  MOVLW  0A
0BFC:  SUBWF  25,F
0BFE:  MOVLW  00
0C00:  SUBWFB 26,F
0C02:  BRA    0C1C
....................       else if (d == 4)pre_temperature+=10; 
0C04:  MOVF   33,W
0C06:  SUBLW  04
0C08:  BNZ   0C14
0C0A:  MOVLW  0A
0C0C:  ADDWF  25,F
0C0E:  MOVLW  00
0C10:  ADDWFC 26,F
0C12:  BRA    0C1C
....................       else if (d == 5) break; 
0C14:  MOVF   33,W
0C16:  SUBLW  05
0C18:  BTFSC  FD8.2
0C1A:  BRA    0C3A
....................       if(pre_temperature >600)pre_temperature=0; 
0C1C:  MOVF   26,W
0C1E:  SUBLW  01
0C20:  BC    0C30
0C22:  XORLW  FF
0C24:  BNZ   0C2C
0C26:  MOVF   25,W
0C28:  SUBLW  58
0C2A:  BC    0C30
0C2C:  CLRF   26
0C2E:  CLRF   25
....................       else if(pre_temperature <0)pre_temperature=600; 
....................       delay_ms(100); 
0C30:  MOVLW  64
0C32:  MOVWF  4E
0C34:  CALL   01F6
0C38:  BRA    0B9C
....................    } 
....................     
....................    while(1) 
....................    { 
....................       lcd_putc('\f'); 
0C3A:  MOVLW  0C
0C3C:  MOVWF  3F
0C3E:  RCALL  04B2
....................       printf(lcd_putc,"FIX TIME (MIN) "); 
0C40:  MOVLW  28
0C42:  MOVWF  FF6
0C44:  MOVLW  01
0C46:  MOVWF  FF7
0C48:  RCALL  0502
....................       lcd_gotoxy(1,2); 
0C4A:  MOVLW  01
0C4C:  MOVWF  40
0C4E:  MOVLW  02
0C50:  MOVWF  41
0C52:  RCALL  0490
....................       printf(lcd_putc,"HEATING: %lu",heating); 
0C54:  MOVLW  38
0C56:  MOVWF  FF6
0C58:  MOVLW  01
0C5A:  MOVWF  FF7
0C5C:  MOVLW  09
0C5E:  MOVWF  36
0C60:  RCALL  0572
0C62:  MOVLW  10
0C64:  MOVWF  FE9
0C66:  MOVFF  28,37
0C6A:  MOVFF  27,36
0C6E:  RCALL  0590
....................       int8 d= buttons(); 
0C70:  RCALL  0A90
0C72:  MOVFF  01,34
....................       if (d == 1)heating++; 
0C76:  DECFSZ 34,W
0C78:  BRA    0C82
0C7A:  INCF   27,F
0C7C:  BTFSC  FD8.2
0C7E:  INCF   28,F
0C80:  BRA    0CBA
....................       else if (d == 2)heating--; 
0C82:  MOVF   34,W
0C84:  SUBLW  02
0C86:  BNZ   0C92
0C88:  MOVF   27,W
0C8A:  BTFSC  FD8.2
0C8C:  DECF   28,F
0C8E:  DECF   27,F
0C90:  BRA    0CBA
....................       else if (d == 3)heating-=10; 
0C92:  MOVF   34,W
0C94:  SUBLW  03
0C96:  BNZ   0CA2
0C98:  MOVLW  0A
0C9A:  SUBWF  27,F
0C9C:  MOVLW  00
0C9E:  SUBWFB 28,F
0CA0:  BRA    0CBA
....................       else if (d == 4)heating+=10; 
0CA2:  MOVF   34,W
0CA4:  SUBLW  04
0CA6:  BNZ   0CB2
0CA8:  MOVLW  0A
0CAA:  ADDWF  27,F
0CAC:  MOVLW  00
0CAE:  ADDWFC 28,F
0CB0:  BRA    0CBA
....................       else if (d == 5) break; 
0CB2:  MOVF   34,W
0CB4:  SUBLW  05
0CB6:  BTFSC  FD8.2
0CB8:  BRA    0CD8
....................       if(heating >600)heating=0; 
0CBA:  MOVF   28,W
0CBC:  SUBLW  01
0CBE:  BC    0CCE
0CC0:  XORLW  FF
0CC2:  BNZ   0CCA
0CC4:  MOVF   27,W
0CC6:  SUBLW  58
0CC8:  BC    0CCE
0CCA:  CLRF   28
0CCC:  CLRF   27
....................       else if(heating <0)heating=600; 
....................       delay_ms(100); 
0CCE:  MOVLW  64
0CD0:  MOVWF  4E
0CD2:  CALL   01F6
0CD6:  BRA    0C3A
....................    } 
....................     
....................    while(1) 
....................    { 
....................       lcd_putc('\f'); 
0CD8:  MOVLW  0C
0CDA:  MOVWF  3F
0CDC:  CALL   04B2
....................       printf(lcd_putc," FIX TEMPERATURE "); 
0CE0:  MOVLW  46
0CE2:  MOVWF  FF6
0CE4:  MOVLW  01
0CE6:  MOVWF  FF7
0CE8:  RCALL  0502
....................       lcd_gotoxy(1,2); 
0CEA:  MOVLW  01
0CEC:  MOVWF  40
0CEE:  MOVLW  02
0CF0:  MOVWF  41
0CF2:  CALL   0490
....................       printf(lcd_putc,"HEATING: %lu",temperature); 
0CF6:  MOVLW  58
0CF8:  MOVWF  FF6
0CFA:  MOVLW  01
0CFC:  MOVWF  FF7
0CFE:  MOVLW  09
0D00:  MOVWF  36
0D02:  RCALL  0572
0D04:  MOVLW  10
0D06:  MOVWF  FE9
0D08:  MOVFF  2A,37
0D0C:  MOVFF  29,36
0D10:  RCALL  0590
....................       int8 d= buttons(); 
0D12:  RCALL  0A90
0D14:  MOVFF  01,35
....................       if (d == 1)temperature++; 
0D18:  DECFSZ 35,W
0D1A:  BRA    0D24
0D1C:  INCF   29,F
0D1E:  BTFSC  FD8.2
0D20:  INCF   2A,F
0D22:  BRA    0D5C
....................       else if (d == 2)temperature--; 
0D24:  MOVF   35,W
0D26:  SUBLW  02
0D28:  BNZ   0D34
0D2A:  MOVF   29,W
0D2C:  BTFSC  FD8.2
0D2E:  DECF   2A,F
0D30:  DECF   29,F
0D32:  BRA    0D5C
....................       else if (d == 3)temperature-=10; 
0D34:  MOVF   35,W
0D36:  SUBLW  03
0D38:  BNZ   0D44
0D3A:  MOVLW  0A
0D3C:  SUBWF  29,F
0D3E:  MOVLW  00
0D40:  SUBWFB 2A,F
0D42:  BRA    0D5C
....................       else if (d == 4)temperature+=10; 
0D44:  MOVF   35,W
0D46:  SUBLW  04
0D48:  BNZ   0D54
0D4A:  MOVLW  0A
0D4C:  ADDWF  29,F
0D4E:  MOVLW  00
0D50:  ADDWFC 2A,F
0D52:  BRA    0D5C
....................       else if (d == 5) break; 
0D54:  MOVF   35,W
0D56:  SUBLW  05
0D58:  BTFSC  FD8.2
0D5A:  BRA    0D7A
....................       if(temperature >600)temperature=0; 
0D5C:  MOVF   2A,W
0D5E:  SUBLW  01
0D60:  BC    0D70
0D62:  XORLW  FF
0D64:  BNZ   0D6C
0D66:  MOVF   29,W
0D68:  SUBLW  58
0D6A:  BC    0D70
0D6C:  CLRF   2A
0D6E:  CLRF   29
....................       else if(temperature <0)temperature=600; 
....................       delay_ms(100); 
0D70:  MOVLW  64
0D72:  MOVWF  4E
0D74:  CALL   01F6
0D78:  BRA    0CD8
....................    } 
0D7A:  GOTO   12E0 (RETURN)
.................... } 
....................  
.................... void run () 
.................... { 
....................    read_temp(); 
*
0DEA:  CALL   044C
....................    if( pre_temperature > 0 ) 
0DEE:  MOVF   25,F
0DF0:  BNZ   0DF8
0DF2:  MOVF   26,F
0DF4:  BTFSC  FD8.2
0DF6:  BRA    0FEC
....................    {    
....................       while(1) 
....................       { 
....................          control(pre_temperature);    
0DF8:  MOVFF  26,34
0DFC:  MOVFF  25,33
0E00:  RCALL  0DA2
....................          lcd_putc('\f'); 
0E02:  MOVLW  0C
0E04:  MOVWF  3F
0E06:  CALL   04B2
....................          printf(lcd_putc,"  PRE->HEATING  "); 
0E0A:  MOVLW  66
0E0C:  MOVWF  FF6
0E0E:  MOVLW  01
0E10:  MOVWF  FF7
0E12:  CALL   0502
....................          lcd_gotoxy(1,2); 
0E16:  MOVLW  01
0E18:  MOVWF  40
0E1A:  MOVLW  02
0E1C:  MOVWF  41
0E1E:  CALL   0490
....................          printf(lcd_putc," %lu%cC -> %lu%cC ",b,1,pre_temperature,1);           
0E22:  MOVLW  20
0E24:  MOVWF  3F
0E26:  CALL   04B2
0E2A:  MOVLW  10
0E2C:  MOVWF  FE9
0E2E:  MOVFF  21,37
0E32:  MOVFF  20,36
0E36:  CALL   0590
0E3A:  MOVLW  01
0E3C:  MOVWF  3F
0E3E:  CALL   04B2
0E42:  MOVLW  7E
0E44:  MOVWF  FF6
0E46:  MOVLW  01
0E48:  MOVWF  FF7
0E4A:  MOVLW  05
0E4C:  MOVWF  36
0E4E:  CALL   0572
0E52:  MOVLW  10
0E54:  MOVWF  FE9
0E56:  MOVFF  26,37
0E5A:  MOVFF  25,36
0E5E:  CALL   0590
0E62:  MOVLW  01
0E64:  MOVWF  3F
0E66:  CALL   04B2
0E6A:  MOVLW  43
0E6C:  MOVWF  3F
0E6E:  CALL   04B2
0E72:  MOVLW  20
0E74:  MOVWF  3F
0E76:  CALL   04B2
....................          if( q >=1 && b>pre_temperature) break; 
0E7A:  MOVF   17,W
0E7C:  SUBLW  00
0E7E:  BC    0E90
0E80:  MOVF   26,W
0E82:  SUBWF  21,W
0E84:  BNC   0E90
0E86:  BNZ   0E8E
0E88:  MOVF   20,W
0E8A:  SUBWF  25,W
0E8C:  BTFSS  FD8.0
0E8E:  BRA    0EAA
....................          if(buttons() == 5){output_low(PIN_A1);break;} 
0E90:  RCALL  0A90
0E92:  MOVF   01,W
0E94:  SUBLW  05
0E96:  BNZ   0EA0
0E98:  MOVLW  F9
0E9A:  MOVWF  F92
0E9C:  BCF    F89.1
0E9E:  BRA    0EAA
....................          delay_ms(200); 
0EA0:  MOVLW  C8
0EA2:  MOVWF  4E
0EA4:  CALL   01F6
0EA8:  BRA    0DF8
....................       } 
....................        while(1) 
....................        { 
....................          lcd_putc('\f'); 
0EAA:  MOVLW  0C
0EAC:  MOVWF  3F
0EAE:  CALL   04B2
....................          printf(lcd_putc,"  PRESS  ENTER  "); 
0EB2:  MOVLW  8C
0EB4:  MOVWF  FF6
0EB6:  MOVLW  01
0EB8:  MOVWF  FF7
0EBA:  CALL   0502
....................          lcd_gotoxy(1,2); 
0EBE:  MOVLW  01
0EC0:  MOVWF  40
0EC2:  MOVLW  02
0EC4:  MOVWF  41
0EC6:  CALL   0490
....................          printf(lcd_putc,"  TO  CONTINUE  ");  
0ECA:  MOVLW  9E
0ECC:  MOVWF  FF6
0ECE:  MOVLW  01
0ED0:  MOVWF  FF7
0ED2:  CALL   0502
....................          if(buttons() == 5)break; 
0ED6:  RCALL  0A90
0ED8:  MOVF   01,W
0EDA:  SUBLW  05
0EDC:  BTFSC  FD8.2
0EDE:  BRA    0FEC
....................          tono(4); 
0EE0:  MOVLW  04
0EE2:  MOVWF  36
0EE4:  RCALL  0996
....................          if(buttons() == 5)break; 
0EE6:  RCALL  0A90
0EE8:  MOVF   01,W
0EEA:  SUBLW  05
0EEC:  BTFSC  FD8.2
0EEE:  BRA    0FEC
....................          delay_ms(1000); 
0EF0:  MOVLW  04
0EF2:  MOVWF  33
0EF4:  MOVLW  FA
0EF6:  MOVWF  4E
0EF8:  CALL   01F6
0EFC:  DECFSZ 33,F
0EFE:  BRA    0EF4
....................          if(buttons() == 5)break; 
0F00:  RCALL  0A90
0F02:  MOVF   01,W
0F04:  SUBLW  05
0F06:  BTFSC  FD8.2
0F08:  BRA    0FEC
....................          delay_ms(1000); 
0F0A:  MOVLW  04
0F0C:  MOVWF  33
0F0E:  MOVLW  FA
0F10:  MOVWF  4E
0F12:  CALL   01F6
0F16:  DECFSZ 33,F
0F18:  BRA    0F0E
....................          if(buttons() == 5)break; 
0F1A:  RCALL  0A90
0F1C:  MOVF   01,W
0F1E:  SUBLW  05
0F20:  BTFSC  FD8.2
0F22:  BRA    0FEC
....................          delay_ms(1000); 
0F24:  MOVLW  04
0F26:  MOVWF  33
0F28:  MOVLW  FA
0F2A:  MOVWF  4E
0F2C:  CALL   01F6
0F30:  DECFSZ 33,F
0F32:  BRA    0F28
....................          if(buttons() == 5)break; 
0F34:  RCALL  0A90
0F36:  MOVF   01,W
0F38:  SUBLW  05
0F3A:  BTFSC  FD8.2
0F3C:  BRA    0FEC
....................          delay_ms(1000); 
0F3E:  MOVLW  04
0F40:  MOVWF  33
0F42:  MOVLW  FA
0F44:  MOVWF  4E
0F46:  CALL   01F6
0F4A:  DECFSZ 33,F
0F4C:  BRA    0F42
....................          if(buttons() == 5)break; 
0F4E:  RCALL  0A90
0F50:  MOVF   01,W
0F52:  SUBLW  05
0F54:  BTFSC  FD8.2
0F56:  BRA    0FEC
....................          delay_ms(1000); 
0F58:  MOVLW  04
0F5A:  MOVWF  33
0F5C:  MOVLW  FA
0F5E:  MOVWF  4E
0F60:  CALL   01F6
0F64:  DECFSZ 33,F
0F66:  BRA    0F5C
....................          if(buttons() == 5)break; 
0F68:  RCALL  0A90
0F6A:  MOVF   01,W
0F6C:  SUBLW  05
0F6E:  BTFSC  FD8.2
0F70:  BRA    0FEC
....................          delay_ms(1000); 
0F72:  MOVLW  04
0F74:  MOVWF  33
0F76:  MOVLW  FA
0F78:  MOVWF  4E
0F7A:  CALL   01F6
0F7E:  DECFSZ 33,F
0F80:  BRA    0F76
....................          if(buttons() == 5)break; 
0F82:  RCALL  0A90
0F84:  MOVF   01,W
0F86:  SUBLW  05
0F88:  BTFSC  FD8.2
0F8A:  BRA    0FEC
....................          delay_ms(1000); 
0F8C:  MOVLW  04
0F8E:  MOVWF  33
0F90:  MOVLW  FA
0F92:  MOVWF  4E
0F94:  CALL   01F6
0F98:  DECFSZ 33,F
0F9A:  BRA    0F90
....................          if(buttons() == 5)break; 
0F9C:  RCALL  0A90
0F9E:  MOVF   01,W
0FA0:  SUBLW  05
0FA2:  BTFSC  FD8.2
0FA4:  BRA    0FEC
....................          delay_ms(1000); 
0FA6:  MOVLW  04
0FA8:  MOVWF  33
0FAA:  MOVLW  FA
0FAC:  MOVWF  4E
0FAE:  CALL   01F6
0FB2:  DECFSZ 33,F
0FB4:  BRA    0FAA
....................          if(buttons() == 5)break; 
0FB6:  RCALL  0A90
0FB8:  MOVF   01,W
0FBA:  SUBLW  05
0FBC:  BTFSC  FD8.2
0FBE:  BRA    0FEC
....................          delay_ms(1000); 
0FC0:  MOVLW  04
0FC2:  MOVWF  33
0FC4:  MOVLW  FA
0FC6:  MOVWF  4E
0FC8:  CALL   01F6
0FCC:  DECFSZ 33,F
0FCE:  BRA    0FC4
....................          if(buttons() == 5)break; 
0FD0:  RCALL  0A90
0FD2:  MOVF   01,W
0FD4:  SUBLW  05
0FD6:  BTFSC  FD8.2
0FD8:  BRA    0FEC
....................          delay_ms(1000); 
0FDA:  MOVLW  04
0FDC:  MOVWF  33
0FDE:  MOVLW  FA
0FE0:  MOVWF  4E
0FE2:  CALL   01F6
0FE6:  DECFSZ 33,F
0FE8:  BRA    0FDE
0FEA:  BRA    0EAA
....................        } 
....................    } 
....................     
....................    if (temperature>0 && heating>0) 
0FEC:  MOVF   29,F
0FEE:  BNZ   0FF4
0FF0:  MOVF   2A,F
0FF2:  BZ    10AA
0FF4:  MOVF   27,F
0FF6:  BNZ   0FFC
0FF8:  MOVF   28,F
0FFA:  BZ    10AA
....................    { 
....................       counter=0; 
0FFC:  CLRF   18
....................       seconds=0; 
0FFE:  CLRF   19
....................       minutes=0; 
1000:  CLRF   1B
1002:  CLRF   1A
....................       while(1) 
....................       { 
....................          if(minutes < heating ) 
1004:  MOVF   1B,W
1006:  SUBWF  28,W
1008:  BNC   10A6
100A:  BNZ   1012
100C:  MOVF   27,W
100E:  SUBWF  1A,W
1010:  BC    10A6
....................          { 
....................             control(temperature); 
1012:  MOVFF  2A,34
1016:  MOVFF  29,33
101A:  RCALL  0DA2
....................             lcd_putc('\f'); 
101C:  MOVLW  0C
101E:  MOVWF  3F
1020:  CALL   04B2
....................             printf(lcd_putc,"    HEATING     "); 
1024:  MOVLW  B0
1026:  MOVWF  FF6
1028:  MOVLW  01
102A:  MOVWF  FF7
102C:  CALL   0502
....................             lcd_gotoxy(1,2); 
1030:  MOVLW  01
1032:  MOVWF  40
1034:  MOVLW  02
1036:  MOVWF  41
1038:  CALL   0490
....................             printf(lcd_putc,"%lu%cC -> %lu%cC ",b,1,temperature,1);   
103C:  MOVLW  10
103E:  MOVWF  FE9
1040:  MOVFF  21,37
1044:  MOVFF  20,36
1048:  CALL   0590
104C:  MOVLW  01
104E:  MOVWF  3F
1050:  CALL   04B2
1054:  MOVLW  C7
1056:  MOVWF  FF6
1058:  MOVLW  01
105A:  MOVWF  FF7
105C:  MOVLW  05
105E:  MOVWF  36
1060:  CALL   0572
1064:  MOVLW  10
1066:  MOVWF  FE9
1068:  MOVFF  2A,37
106C:  MOVFF  29,36
1070:  CALL   0590
1074:  MOVLW  01
1076:  MOVWF  3F
1078:  CALL   04B2
107C:  MOVLW  43
107E:  MOVWF  3F
1080:  CALL   04B2
1084:  MOVLW  20
1086:  MOVWF  3F
1088:  CALL   04B2
....................             if(buttons() == 5){output_low(PIN_A1);break;} 
108C:  RCALL  0A90
108E:  MOVF   01,W
1090:  SUBLW  05
1092:  BNZ   109C
1094:  MOVLW  F9
1096:  MOVWF  F92
1098:  BCF    F89.1
109A:  BRA    10AA
....................             delay_ms(200); 
109C:  MOVLW  C8
109E:  MOVWF  4E
10A0:  CALL   01F6
....................          } 
10A4:  BRA    10A8
....................          else break; 
10A6:  BRA    10AA
10A8:  BRA    1004
....................           
....................       } 
....................         
....................    } 
10AA:  GOTO   12E2 (RETURN)
....................     
.................... } 
....................  
.................... void end () 
.................... { 
....................    while(1) 
....................    { 
....................       output_low(PIN_A1); 
10AE:  MOVLW  F9
10B0:  MOVWF  F92
10B2:  BCF    F89.1
....................       read_temp(); 
10B4:  CALL   044C
....................       lcd_putc('\f'); 
10B8:  MOVLW  0C
10BA:  MOVWF  3F
10BC:  CALL   04B2
....................       printf(lcd_putc,"    FINISH     "); 
10C0:  MOVLW  D4
10C2:  MOVWF  FF6
10C4:  MOVLW  01
10C6:  MOVWF  FF7
10C8:  CALL   0502
....................       lcd_gotoxy(1,2); 
10CC:  MOVLW  01
10CE:  MOVWF  40
10D0:  MOVLW  02
10D2:  MOVWF  41
10D4:  CALL   0490
....................       printf(lcd_putc,"     %lu%cC     ",b,1);  
10D8:  MOVLW  E4
10DA:  MOVWF  FF6
10DC:  MOVLW  01
10DE:  MOVWF  FF7
10E0:  MOVLW  05
10E2:  MOVWF  36
10E4:  CALL   0572
10E8:  MOVLW  10
10EA:  MOVWF  FE9
10EC:  MOVFF  21,37
10F0:  MOVFF  20,36
10F4:  CALL   0590
10F8:  MOVLW  01
10FA:  MOVWF  3F
10FC:  CALL   04B2
1100:  MOVLW  EE
1102:  MOVWF  FF6
1104:  MOVLW  01
1106:  MOVWF  FF7
1108:  MOVLW  06
110A:  MOVWF  36
110C:  CALL   0572
....................       tono(3); 
1110:  MOVLW  03
1112:  MOVWF  36
1114:  RCALL  0996
....................       if(buttons() == 5)break; 
1116:  RCALL  0A90
1118:  MOVF   01,W
111A:  SUBLW  05
111C:  BTFSC  FD8.2
111E:  BRA    121C
....................       delay_ms(1000); 
1120:  MOVLW  04
1122:  MOVWF  33
1124:  MOVLW  FA
1126:  MOVWF  4E
1128:  CALL   01F6
112C:  DECFSZ 33,F
112E:  BRA    1124
....................       if(buttons() == 5)break; 
1130:  RCALL  0A90
1132:  MOVF   01,W
1134:  SUBLW  05
1136:  BTFSC  FD8.2
1138:  BRA    121C
....................       delay_ms(1000); 
113A:  MOVLW  04
113C:  MOVWF  33
113E:  MOVLW  FA
1140:  MOVWF  4E
1142:  CALL   01F6
1146:  DECFSZ 33,F
1148:  BRA    113E
....................       if(buttons() == 5)break; 
114A:  RCALL  0A90
114C:  MOVF   01,W
114E:  SUBLW  05
1150:  BTFSC  FD8.2
1152:  BRA    121C
....................       delay_ms(1000); 
1154:  MOVLW  04
1156:  MOVWF  33
1158:  MOVLW  FA
115A:  MOVWF  4E
115C:  CALL   01F6
1160:  DECFSZ 33,F
1162:  BRA    1158
....................       if(buttons() == 5)break; 
1164:  RCALL  0A90
1166:  MOVF   01,W
1168:  SUBLW  05
116A:  BTFSC  FD8.2
116C:  BRA    121C
....................       delay_ms(1000); 
116E:  MOVLW  04
1170:  MOVWF  33
1172:  MOVLW  FA
1174:  MOVWF  4E
1176:  CALL   01F6
117A:  DECFSZ 33,F
117C:  BRA    1172
....................       if(buttons() == 5)break; 
117E:  RCALL  0A90
1180:  MOVF   01,W
1182:  SUBLW  05
1184:  BTFSC  FD8.2
1186:  BRA    121C
....................       delay_ms(1000); 
1188:  MOVLW  04
118A:  MOVWF  33
118C:  MOVLW  FA
118E:  MOVWF  4E
1190:  CALL   01F6
1194:  DECFSZ 33,F
1196:  BRA    118C
....................       if(buttons() == 5)break; 
1198:  RCALL  0A90
119A:  MOVF   01,W
119C:  SUBLW  05
119E:  BTFSC  FD8.2
11A0:  BRA    121C
....................       delay_ms(1000); 
11A2:  MOVLW  04
11A4:  MOVWF  33
11A6:  MOVLW  FA
11A8:  MOVWF  4E
11AA:  CALL   01F6
11AE:  DECFSZ 33,F
11B0:  BRA    11A6
....................       if(buttons() == 5)break; 
11B2:  RCALL  0A90
11B4:  MOVF   01,W
11B6:  SUBLW  05
11B8:  BTFSC  FD8.2
11BA:  BRA    121C
....................       delay_ms(1000); 
11BC:  MOVLW  04
11BE:  MOVWF  33
11C0:  MOVLW  FA
11C2:  MOVWF  4E
11C4:  CALL   01F6
11C8:  DECFSZ 33,F
11CA:  BRA    11C0
....................       if(buttons() == 5)break; 
11CC:  RCALL  0A90
11CE:  MOVF   01,W
11D0:  SUBLW  05
11D2:  BTFSC  FD8.2
11D4:  BRA    121C
....................       delay_ms(1000); 
11D6:  MOVLW  04
11D8:  MOVWF  33
11DA:  MOVLW  FA
11DC:  MOVWF  4E
11DE:  CALL   01F6
11E2:  DECFSZ 33,F
11E4:  BRA    11DA
....................       if(buttons() == 5)break; 
11E6:  RCALL  0A90
11E8:  MOVF   01,W
11EA:  SUBLW  05
11EC:  BTFSC  FD8.2
11EE:  BRA    121C
....................       delay_ms(1000); 
11F0:  MOVLW  04
11F2:  MOVWF  33
11F4:  MOVLW  FA
11F6:  MOVWF  4E
11F8:  CALL   01F6
11FC:  DECFSZ 33,F
11FE:  BRA    11F4
....................       if(buttons() == 5)break; 
1200:  RCALL  0A90
1202:  MOVF   01,W
1204:  SUBLW  05
1206:  BTFSC  FD8.2
1208:  BRA    121C
....................       delay_ms(1000); 
120A:  MOVLW  04
120C:  MOVWF  33
120E:  MOVLW  FA
1210:  MOVWF  4E
1212:  CALL   01F6
1216:  DECFSZ 33,F
1218:  BRA    120E
121A:  BRA    10AE
....................    } 
121C:  GOTO   12E4 (RETURN)
....................     
.................... } 
....................  
....................  
....................  
.................... void main() 
1220:  CLRF   FF8
1222:  BCF    FD0.7
1224:  BSF    07.7
1226:  MOVLW  70
1228:  MOVWF  FD3
122A:  MOVF   FD3,W
122C:  BCF    FB8.3
122E:  MOVLW  0C
1230:  MOVWF  FAF
1232:  MOVLW  A2
1234:  MOVWF  FAC
1236:  MOVLW  90
1238:  MOVWF  FAB
123A:  BSF    F94.2
123C:  BCF    F94.1
123E:  BCF    F94.4
1240:  BCF    F8B.4
1242:  BCF    F94.5
1244:  BCF    F8B.5
1246:  CLRF   16
1248:  CLRF   17
124A:  CLRF   18
124C:  CLRF   19
124E:  CLRF   1B
1250:  CLRF   1A
1252:  CLRF   1D
1254:  CLRF   1C
1256:  CLRF   1E
1258:  CLRF   1F
125A:  CLRF   21
125C:  CLRF   20
125E:  CLRF   22
1260:  CLRF   24
1262:  CLRF   23
1264:  CLRF   26
1266:  CLRF   25
1268:  CLRF   28
126A:  CLRF   27
126C:  CLRF   2A
126E:  CLRF   29
1270:  MOVF   FC1,W
1272:  ANDLW  C0
1274:  IORLW  0F
1276:  MOVWF  FC1
1278:  MOVLW  07
127A:  MOVWF  FB4
127C:  MOVLW  0F
127E:  MOVWF  2B
1280:  MOVLW  09
1282:  MOVWF  2C
1284:  MOVLW  0F
1286:  MOVWF  2D
1288:  CLRF   2E
128A:  CLRF   2F
128C:  CLRF   30
128E:  CLRF   31
1290:  CLRF   32
.................... { 
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);      //262 ms overflow 
1292:  MOVLW  B5
1294:  MOVWF  FCD
....................    setup_adc_ports(AN0); 
1296:  MOVF   FC1,W
1298:  ANDLW  C0
129A:  IORLW  0E
129C:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_INTERNAL); 
129E:  MOVF   FC0,W
12A0:  ANDLW  C0
12A2:  IORLW  07
12A4:  MOVWF  FC0
12A6:  BSF    FC0.7
12A8:  BSF    FC2.0
....................  
....................    set_timer1(3035); 
12AA:  MOVLW  0B
12AC:  MOVWF  FCF
12AE:  MOVLW  DB
12B0:  MOVWF  FCE
....................    enable_interrupts(INT_TIMER1); 
12B2:  BSF    F9D.0
....................    enable_interrupts(GLOBAL); 
12B4:  MOVLW  C0
12B6:  IORWF  FF2,F
....................  
....................    lcd_init(); 
12B8:  GOTO   033E
....................    set_adc_channel(0); 
12BC:  MOVLW  00
12BE:  MOVWF  01
12C0:  MOVF   FC2,W
12C2:  ANDLW  C3
12C4:  IORWF  01,W
12C6:  MOVWF  FC2
....................    lcd_set_cgram_char(1, ptr); 
12C8:  MOVLW  01
12CA:  MOVWF  33
12CC:  CLRF   35
12CE:  MOVLW  2B
12D0:  MOVWF  34
12D2:  GOTO   03AC
....................     
....................    while(TRUE) 
....................    { 
....................       read_temp(); 
12D6:  CALL   044C
....................       begin(); 
12DA:  GOTO   0522
....................       mode(); 
12DE:  BRA    0B9C
....................       run(); 
12E0:  BRA    0DEA
....................       end(); 
12E2:  BRA    10AE
....................       delay_ms(1000); 
12E4:  MOVLW  04
12E6:  MOVWF  33
12E8:  MOVLW  FA
12EA:  MOVWF  4E
12EC:  CALL   01F6
12F0:  DECFSZ 33,F
12F2:  BRA    12E8
12F4:  BRA    12D6
....................    } 
....................  
.................... } 
12F6:  SLEEP 

Configuration Fuses:
   Word  1: 0807   PLL12 CPUDIV1 NOUSBDIV INTRC_IO NOFCMEN NOIESO
   Word  2: 1E18   PUT NOBROWNOUT BORV21 NOVREGEN NOWDT WDT32768
   Word  3: 0500   CCP2C1 NOPBADEN LPT1OSC NOMCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C000   PROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
